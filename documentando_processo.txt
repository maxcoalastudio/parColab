_abra o a pasta do projeto 
_crie um ambiente virtual (venv), navegando ate a pasta do projeto pelo termina 'cd caminho' 
_use o comando para criar o ambiente
python -m venv nome_do_ambiente
_ative o ambiente no terminal
windows
nome_do_ambiente\Scripts\activate 
mac
nome_do_ambiente/bin/activate
_desativando
deactivate

_para instalar pacotes em um ambiente virtual
pip install nome_do_pacote

_para executar um Script
python exemplo.py

vamos criar uma pasta dentro do nosso diretorio para poder subir para o github

criando um repositório no GitHub
Depois de ter criado a conta na plataforma e instalado o Git na sua máquina, você já pode hospedar o seu primeiro projeto no GitHub.com. Para isso:

Abra o terminal de comando do seu sistema operacional;
la no github podemos criar um novo repositorio manualmente
vai pegar o https link 

echo "# nomeRepositorio" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/nomeusuario/repositorio.git
git push -u origin main

se preferir por linhas de comando :
Dentro da pasta do projeto, digite: git init
O comando acima irá criar toda a estrutura básica do repositório;
Para adicionar todos os arquivos alterados à fila de atualizações do repositório, execute o comando: git add .
Antes de sincronizar as alterações, configure seu usuário do GitHub com os comandos:
git config --global user.name "seu nome"
git config --global user.email "email no GitHub"
Confirme as alterações com o comando: git commit -m "mensagem"
no qual “mensagem” geralmente é um resumo das alterações.
Adicione o remote, ou seja, o link para o servidor do seu projeto no GitHub:
git remote add origin usuário no GitHub>/<nome do repositório>.git
Por fim, envie as alterações com o comando:
git push remote origin
Se tudo deu certo, será exibido uma mensagem confirmando o envio. Você também pode checar na página do repositório do projeto no GitHub.com.
mais informações:
https://docs.github.com/pt/get-started/using-git 

usando agora o git status sempre pra saber quais arquivos foram adicionadosn o commit
git add .     ou arquivo especifico
git commit -m "iniciando "
git status
git push

agora vamos criar um arquivo com nome_do_app.py


_no nosso terminal vamos dar um 
pip install flet

_agora no app.py vamos importar o flet

import flet as ft

_e sempre vamos apelidar de ft

_vamos começar a escrever nossa interface:
ft.app(target=main)
_assim chamamos a função app do flet e definimos que o alvo seja a main
_dessa forma estou inicializando um aplicativo ft.app, o target me diz qual função python responsavel por definir a interface 
_vamos definir essa função acima dessa chamada de app
_a main vai receber um parametro que vai ser nossa page, e vamos tipar ela como page: ft.Page
def main(page: ft.Page):
_dessa forma o proprio flet vai fazer uma injeção de dependencia e vai passar para nossa função main a nossa pagina da nossa interface para podermos contruir ela 
_o flet vai passar uma pagina em branco e podemos passar para a page os nossos elementos como botão, titulo e tudo mais
_ate agora é só uma pagina em branco, nao tem absolutamente nada, vamos começar a criar, um texto primeiramente
    txt_titulo = ft.Text('Titulo do Produto') 
_vamos chamat o Text() do ft e add um valor string e colocar isso em uma variavel
_temos nosso elemento de texto add, vamos colocar um campo abaixo para um input de dados
_para eu dizer que page vai ter o atributo text, vamos add ele com add no page

    page.add(
        txt_titulo
    )
_vamos add um titulo tambem acima do txt_titulo
page.title = "parColab"

_vamos add um campo de texto para input com label com um placehoulder com um alinhamento e add na pagina essa variavel
    produto = ft.TextField(label = "Digite o titulo produto aqui ", text_align=ft.TextAlign.LEFT)


_vamos add um preço para esse produto tambem

    txt_preco = ft.Text('preço do produto')
    preco = ft.TextField(value="0", label = "Digite o preço do produto", TextAlign.LEFT)
    btn_produto = ft.ElevatedButton('Cadastrar', on_click=cadastrar)
_e vamos add na pagina colocando abaixo ou entre os outros elementos que precisam estar no app
_no botao vamos add um evento onclick que recebe uma funcao cadastrar que vamos add abaixo da variavel page.title
_vamos passar um parametro chamado event vamos passar como 'e' para simplificar 
    def cadastrar(e):
        print('Fui chamado')
_quando executamos e clicamos em cadastrar em prita no terminal "fui chamado"
_precisamos acessar os valores tanto do que ele digitou em produto quanto do que ele digitou em preço, então invez de printar "fui chamado", ele printa produto.value e preco.value
_agora precisamos trabalhar com a conexão com banco de dados, criar uma tabela no banco de dados pra poder salvar esses dados .
_vamos criar uma outra camada da nossa aplicação .
-MVC 
*CAMADA DE MODEL- PARTE COM BANCO DE DADOS ONDE MODELAMOS NOSSO BANCO DE DADOS
*CAMADA DE VIEWS- A PARTE DA INTERFACE 
*CAMADA DE CONTROLE- LOGICA DA NOSSA aplicação
_teoricamente estamos criando uma model , vamos criar um outro arquivo
models.py e quero usar um ORM
nao vamos entrar em profundidade o que é sql alchemy pois é um conteudo sobre flet 
_ o sqlAlchemy é uma ferramenta usada para manipular um banco de dados usando python produto
_ vamos instalar ela usando o "pip install sqlalchemy"
vou passar o centeudo da models.py

from sqlalchemy import create_engine, columns,Column, Integer, String, ForeignKey, Float
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

CONN = "sqlite:///parcolab.db" # criando uma string de conexão, com sqlite que roda na maquiva virtual, e o banco de dados vai se chamar parcolab.db

engine = create_engine(CONN, echo = True) # nossa conexao eu passo 2 argumentos um com CONN QUE PASSA QUAL BANCO DE DADOS, e echo que vai exibir uma mensagem
Session = sessionmaker(bind=engine) # session que vai ser uma camada intermediaria onde os dados ficam no banco de dados, pra depois salvalos dentro do banco, 
session = Session() 
Base = declarative_base() # essa base vai ser herdada na classe produto que por sua ver é do sqlalchemy 
#essa classe do python vai se transformar em uma tabena no banco de dados de acordo com os valores passados em produto
class Produto(Base):
    __tablename__= "Produto" # nome da tabela
    id = Column(Integer, primary_key=True) # o id é uma coluna do tipo inteiro , que recebe nossa chave primaria
    titulo = Column(String(50)) # adicionando uma coluna do tipo string para titulo com quantidade maxima de 50
    preco = Column(Float()) # e uma coluna com tipo floar para preço

Base.Metadata.create_all(engine) #acessando uma função que esta em uma classe  , que chama a conexão do banco de dados

_quanto rodamos "python3 models.py" 
_ ele cria um arquivo de DB , E QUANDO ABRIMOS ESSE ARQUIVO ELE MOSTRA a estrutura do banco de dados
_ use o sqlite viewer se estiver usando o vscode para visualizar, ele esta disposto em extensões
_ temos que inserir od dados na tabela , entao vamos voltar la para nosso app

_temos nossa função cadastrar que é ativada quando clicamos em cima do botão btn produto
_vamos tirar as funções de print e começar a trabalhar nela 
_vamos criar uma variavel chamada novo_produto = Produto(titulo=produto.value, preco=preco.value) que vai ser a variavel que eu vou instaciar a classe produto 
_vamos precisar importar ela 
from models import Produto
_o id como é uma primaryKey não precisamos passar, ele é gerado automaticamente

_o que precisamos fazer agora é pegar isso aqui e add na camada intermediaria do sqlAlchemy, mostrando que tem uma alteração pra ser feita no banco de dados, então abaixo da variavel criada vamos fazer. 
session.add(novo_produto)
_mas para fazermos isso temos que ter conexão com o banco de dados, e a conexao foi feita apenas no arquivo model.py
_então vamos copiar as linhas do model.py 

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

CONN = "sqlite:///parcolab.db"
engine = create_engine(CONN, echo = True) 
Session = sessionmaker(bind=engine)
session = Session() 

_então agora sim , então ele faz assim , olha sqlAlchemy vou fazer uma operação no banco de dodos,o ssession.add(novo_produto) só informa para o sqlalchemy que foi feita uma alteração no banco de dados, mas isso não foi de fato efetivado no banco de dados.
_pra de fato efetivarmos no banco de dados precisamos executar 
ssetion.commit()
_isso vai salvar nosso produtos la no banco, e podemos dar um print para informar isso!
print('Produto salvo com Sucesso!')

_funcionando vamos subir para o github
usando agora o git status sempre pra saber quais arquivos foram adicionadosn o commit
git add .     ou arquivo especifico
git commit -m "registro do produto no DB "
git status
git push

_o que falta pra realizar o que eu pretendia fazer?
_mostrar 2 mensagens de produto cadastrado com sucesso ou erro ao cadastrar produto, e listar todos os produtos cadastrados no bando
_para podermos listar todos os produtos podemos usar o listview, uma estrutura do proprio flet pra ser exibida na interface
_ acima da função cadastrar vamos criar uma variavel lista_produtos = ft.ListView() 
_essa lista ainda esta vazia , eu quero add todos os dados presentes no banco , entao vamos primeiro buscar esses dados pra depois add na lista
_logo apos a função page.add 
_Para buscar um produto do sqlAlchemy é bem simples, usamos o session e fazemos uma consulta usando a função query pro uma tabela, e vamos usar um filtro para os dados  entao o filtro para todos vai ser usado 
for p in session.query(Produto).all():
    lista_produtos.controls.append(ft.Text(p.titulo))

_para fazermos aparecer na interface usamos o 
page.add(lista_produtos)

_ o produto só aparecera se eu registrar o produto e logo apos se eu fechar minha applicao e abrila novamente, isso é um problema !
_precisamos atualizar esse preoduto sem fechar logo depois de cadastrar o novo produto
_podemos fazer logo apos salvar nosso produto com o commit eu replico esse codigo que criamos logo apos o commit
lista_produtos.controls.append(ft.Text(produto.value))
page.update()
_isso resolve nosso primeiro problema
_mas ainda esta feio vamos add mais coisas no nosso loop para poder estilizar, vamos add um container
for p in session.query(Produto).all():
    lista_produtos.controls.append(
        ft.Container(
            ft.Text(p.titulo),
            bgcolor=ft.colors.BLACK12,
            padding = 15,
            alignment = ft.alignment.center,
            margin = 3,
            border_radius = 10
        )
    )

_agora para sempre conseguir manter esse padrão ao add um novo item vamos copiar todo ft.Container
e add no lugar do ft.Text

_e o p.text dentro do container trocamos por produto.value

_agora eu quero que quando deu certo eu salvar o item no bando de dados ele me mostre uma mensagem(produto salvo com sucesso)
_se acontecer algum erro ele mostra (erro interno do sistema/erro ao cadastrar produto )
vamos criar dois campo de texto acima de txt_titulo sendo
txt_erro = ft.Container(ft.Text('Erro ao salvar o produto!'), visible=False, bgcolor=ft.colors.RED, padding=10, alignment=ft.alignment.center)#  não visivel
txt_acerto = ft.Container(ft.Text('produto salvo com Sucesso!'), visible=False, bgcolor=ft.colors.GREEN, padding=10, alignment=ft.alignment.center)#  não visivel
_so vamos tornalo visivel quando uma ação acontecer, E COM formatação com cores indicando o status

_esta vendo nossa função cadastrar ? como eu sei que consegui salvar de fato no banco de dados ? posso utilizar um tratamento de excessões do python que é o try e o except

_colocamos todo codigo dentro de cadastrar ate e incluindo o lista de produtos dentro de try e abaixo disso vamos criar um except com o pass por enquanto
_quando o try funcionar eu quero habilitar a visibilidade do sucesso e quando ele pular apara o except eu quero habilitar a visibilidade do erro
_vamos add os textos no page.add
_quando habilito o visible de um tenho que dasabilitar de outro , o codigo fica assim :

import flet as ft 
from models import Produto
from sqlalchemy import create_engine 
from sqlalchemy.orm import sessionmaker 

CONN = "sqlite:///parcolab.db"
engine = create_engine(CONN, echo = True) 
Session = sessionmaker(bind=engine)
session = Session()

def main(page: ft.Page):
    page.title = "Cadastro parColab"

    lista_produtos = ft.ListView()
    
    def cadastrar(e):
        try:
            novo_produto = Produto(titulo=produto.value, preco=preco.value)
            session.add(novo_produto)
            session.commit()
            lista_produtos.controls.append(ft.Container(
                    ft.Text(produto.value),
                    bgcolor=ft.colors.BLACK12,
                    padding = 15,
                    alignment = ft.alignment.center,
                    margin = 3,
                    border_radius = 10
                )
                )
            txt_erro.visible = False
            txt_acerto.visible = True

        except:
            txt_erro.visible = True
            txt_acerto.visible = False
        page.update()
        print('Produto salvo com Sucesso!')
    txt_erro = ft.Container(ft.Text('Erro ao salvar o produto!'), visible=False, bgcolors=ft.color.RED, padding=10, alignment=ft.alignment.center)#não visivel
    txt_acerto = ft.Container(ft.Text('produto salvo com Sucesso!'), visible=False, bgcolors=ft.color.GREEN, padding=10, alignment=ft.alignment.center)#não visivel

    txt_titulo = ft.Text('Titulo do produto:')
    produto = ft.TextField(label="Digite o titulo do produto", text_align=ft.TextAlign.LEFT)
    txt_preco = ft.Text('Preço do produto')
    preco = ft.TextField(value="0", label="Digite o preço do produto", text_align=ft.TextAlign.LEFT)
    btn_produto = ft.ElevatedButton('Cadastrar', on_click=cadastrar)
    page.scroll = "always" #add um scrollbar
    page.add(
        txt_acerto,
        txt_erro,
        txt_titulo,
        produto,
        txt_preco,
        preco,
        btn_produto
    )

    for p in session.query(Produto).all():
        lista_produtos.controls.append(
            ft.Container(
                ft.Text(p.titulo),
                bgcolor=ft.colors.BLACK12,
                padding = 15,
                alignment = ft.alignment.center,
                margin = 3,
                border_radius = 10
            )
        )

    page.add(lista_produtos,
             )
ft.app(target=main)